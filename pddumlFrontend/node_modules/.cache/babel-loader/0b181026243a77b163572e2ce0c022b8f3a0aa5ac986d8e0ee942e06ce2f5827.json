{"ast":null,"code":"var _jsxFileName = \"/home/tanmay/Desktop/Tanmay Engineering/BEProject/FrontEnd/pddumlFrontend/src/Form.js\",\n  _s = $RefreshSig$();\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { useState } from 'react';\nimport './Nav.css';\nimport { decode } from 'jpeg-js';\n// import { Alert } from 'react-alert'\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Form() {\n  _s();\n  const [plant, setPlant] = useState(\" \");\n  const [imgfile, setImgfile] = useState([]);\n  const [selectedFile, setselectedFile] = useState(null);\n  const [result, setResult] = useState(\"\");\n  const onFileChange = name => {\n    setResult(\"\");\n    const file = name.target.files[0];\n    setPlant(URL.createObjectURL(name.target.files[0]));\n    // Create a new FileReader object to read the file as an array buffer\n    const reader = new FileReader();\n\n    // Set up an event listener for when the file has finished loading\n    reader.addEventListener('load', event => {\n      // Get the array buffer from the loaded file data\n      const arrayBuffer = event.target.result;\n\n      // Decode the JPEG image data and get the pixel values\n      const imageData = decode(new Uint8Array(arrayBuffer), {\n        useTArray: true\n      });\n\n      // Loop over the pixels in the image data and read their values\n      for (let y = 0; y < imageData.height; y++) {\n        for (let x = 0; x < imageData.width; x++) {\n          const index = (y * imageData.width + x) * 4;\n          const red = imageData.data[index];\n          const green = imageData.data[index + 1];\n          const blue = imageData.data[index + 2];\n          const alpha = imageData.data[index + 3];\n          let temp = imgfile;\n          temp.push(blue);\n          setImgfile(temp);\n\n          // Do something with the pixel data here\n          // console.log(`Pixel at (${x}, ${y}): (${red}, ${green}, ${blue}, ${alpha})`);\n        }\n      }\n    });\n\n    // Start reading the file as an array buffer\n    reader.readAsArrayBuffer(file);\n  };\n  const onFileUpload = () => {\n    // console.log(imgfile,imgfile.length)\n    axios.post(\"http://127.0.0.1:8000/gettomoato/\", {\n      tomato_unhealthy: imgfile\n    }).then(data => {\n      // if (data.data.status===\"success\"){\n      setResult(\"The Plant is\" + data.data.result);\n\n      // }\n    });\n\n    // Create an object of formData\n    // const formData = new FormData();\n\n    // // Update the formData object\n    // formData.append(\n    //   \"myFile\",\n    // selectedFile,\n    //   selectedFile.name\n    // );\n\n    // console.log(selectedFile)\n    // Details of the uploaded file\n    //     let output = \"\";\n    // for (const [key, value] of formData) {\n    //   // output += `${key}: ${value}\\n`;\n    //   console.log(value)\n    // }\n    //    console.log(output)\n    // Request made to the backend api\n    // Send formData object\n    // axios.post(\"api/uploadfile\", formData);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Form\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Upload Image of leaf:              \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          name: \"imagefile\",\n          id: \"imgfile\",\n          onChange: name => onFileChange(name),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Submit\",\n          onClick: () => {\n            onFileUpload();\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 10\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"reset\",\n          value: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 10\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 8\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 12\n  }, this);\n}\n_s(Form, \"aYrysuACrvhzMQNlMSTx/4PdhgQ=\");\n_c = Form;\nexport default Form;\nvar _c;\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["React","Component","axios","useState","decode","Form","plant","setPlant","imgfile","setImgfile","selectedFile","setselectedFile","result","setResult","onFileChange","name","file","target","files","URL","createObjectURL","reader","FileReader","addEventListener","event","arrayBuffer","imageData","Uint8Array","useTArray","y","height","x","width","index","red","data","green","blue","alpha","temp","push","readAsArrayBuffer","onFileUpload","post","tomato_unhealthy","then"],"sources":["/home/tanmay/Desktop/Tanmay Engineering/BEProject/FrontEnd/pddumlFrontend/src/Form.js"],"sourcesContent":["import React, { Component }  from 'react';\nimport axios from 'axios';\nimport { useState } from 'react';\nimport './Nav.css'\nimport { decode } from 'jpeg-js';\n// import { Alert } from 'react-alert'\nfunction Form(){\n\n  const[plant,setPlant]= useState(\" \");\n  const [imgfile,setImgfile]= useState([]);\n  const [selectedFile,setselectedFile]=useState(null);\n  const [result,setResult] = useState(\"\")\n\n const  onFileChange = name => {\n  setResult(\"\")\n  const file = name.target.files[0];\nsetPlant(URL.createObjectURL(name.target.files[0]))\n  // Create a new FileReader object to read the file as an array buffer\n  const reader = new FileReader();\n  \n  // Set up an event listener for when the file has finished loading\n  reader.addEventListener('load', (event) => {\n    // Get the array buffer from the loaded file data\n    const arrayBuffer = event.target.result;\n  \n    // Decode the JPEG image data and get the pixel values\n    const imageData = decode(new Uint8Array(arrayBuffer), { useTArray: true });\n\n  \n    // Loop over the pixels in the image data and read their values\n    for (let y = 0; y < imageData.height; y++) {\n      for (let x = 0; x < imageData.width; x++) {\n        const index = (y * imageData.width + x) * 4;\n        const red = imageData.data[index];\n        const green = imageData.data[index + 1];\n        const blue = imageData.data[index + 2];\n        const alpha = imageData.data[index + 3];\n        let temp = imgfile;\n        temp.push(blue);\n        setImgfile(temp)\n  \n        // Do something with the pixel data here\n        // console.log(`Pixel at (${x}, ${y}): (${red}, ${green}, ${blue}, ${alpha})`);\n      }\n    }\n  });\n  \n  // Start reading the file as an array buffer\n  reader.readAsArrayBuffer(file);\n}\n  \n  \n const  onFileUpload = () => {\n// console.log(imgfile,imgfile.length)\naxios.post(\"http://127.0.0.1:8000/gettomoato/\",{tomato_unhealthy:imgfile})\n.then(data=>{\n  // if (data.data.status===\"success\"){\n    setResult(\"The Plant is\" + data.data.result)\n\n  // }\n})\n\n    // Create an object of formData\n    // const formData = new FormData();\n   \n    // // Update the formData object\n    // formData.append(\n    //   \"myFile\",\n    // selectedFile,\n    //   selectedFile.name\n    // );\n  \n    // console.log(selectedFile)\n    // Details of the uploaded file\n//     let output = \"\";\n// for (const [key, value] of formData) {\n//   // output += `${key}: ${value}\\n`;\n//   console.log(value)\n// }\n//    console.log(output)\n    // Request made to the backend api\n    // Send formData object\n    // axios.post(\"api/uploadfile\", formData);\n  };\n    return(<div className=\"App\">\n       <div className=\"Form\">\n\n     <h3>{result}</h3>\n      <p>\n        <strong>Upload Image of leaf:              </strong>\n    \n      <input type=\"file\" name=\"imagefile\" id=\"imgfile\" onChange={(name)=>onFileChange(name)} required /></p>\n      {/* <p><strong>Select Plant:                      </strong>\n      \n      <select name=\"plant\" id=\"plant\" onChange={(name)=>setPlant(name.target.value)} required>\n        <option value=\"\">Tomato</option>\n        <option value=\"\">Papper Bell </option>\n        <option value=\"\">Potato</option>\n      </select></p> */}\n      <p><input type=\"submit\" value=\"Submit\" \n      onClick={()=>{onFileUpload()}}/></p>\n\n      <p><input type=\"reset\" value=\"Reset\" /></p>\n\n    \n    </div>\n  </div>\n    );\n}\nexport default Form;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}